# render.yaml (Corrected for Separate Services)

# This blueprint defines all the services needed for the contract intelligence app.
# 1. A managed Redis instance for Celery.
# 2. A persistent disk for file uploads.
# 3. A Dockerized web service for the FastAPI API.
# 4. A Dockerized background worker for the Celery process.

services:
  # -----------------
  #  1. Redis Service
  # -----------------
  - type: redis
    name: redis-broker # Renamed for clarity, was 'contract-redis'
    plan: free

  # -----------------
  #  2. Persistent Disk (Highly Recommended)
  # -----------------
  # This disk will be shared between the API and the Worker.
  - type: disk
    name: uploads-disk
    mountPath: /app/uploads
    sizeGB: 1

  # -----------------
  #  3. FastAPI Web Service (the API)
  # -----------------
  - type: web
    name: contract-api
    plan: free
    runtime: docker # Use 'docker' runtime for Dockerfile builds
    dockerfilePath: ./Dockerfile # Point to your Dockerfile
    dockerContext: .
    envVars:
      # Use an Environment Group for secrets
      - fromGroup: contract-app-env
    # Attach the persistent disk
    disks:
      - name: uploads-disk
        mountPath: /app/uploads
    healthCheck:
      path: / # Use the root path for a simple health check

  # -----------------
  #  4. Celery Background Worker
  # -----------------
  - type: worker
    name: contract-worker
    plan: free
    runtime: docker
    dockerfilePath: ./Dockerfile # Use the same Dockerfile
    dockerContext: .
    # This command OVERRIDES the Dockerfile's CMD for this service only
    startCommand: celery -A tasks.celery_worker.celery_app worker --loglevel=info --pool=solo
    envVars:
      # Use the same Environment Group
      - fromGroup: contract-app-env
    # Attach the same persistent disk
    disks:
      - name: uploads-disk
        mountPath: /app/uploads

# --- Environment Group Definition ---
# You will create this group in the Render UI to hold your secrets.
envVarGroups:
  - name: contract-app-env